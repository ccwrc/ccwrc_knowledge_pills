
Instalacja (Linux):
http://symfony.com/doc/2.8/setup.html
  $ sudo curl -LsS http://symfony.com/installer -o /usr/local/bin/symfony
  $ sudo chmod a+x /usr/local/bin/symfony

Tworzenie nowego projektu:
  $ symfony new nazwa_projektu
  opcjonalnie mozna podac wersję Symfony: $ symfony new nazwa_projektu 3.3

Listing poleceń konsoli:
  $ php app/console

----------------------------------------------------------------
najczęściej wykorzystywane polecenia konsoli:
  $ php app/console debug:container - pełna lista dostępnych serwisów
  $ php app/console server:start - uruchomienie wbudowanego serwera deweloperskiego (standardowo działa na porcie 8000)
  $ php app/console server:stop - zatrzymanie serwera deweloperskiego
  $ php app/console assets:install - kopiowanie zasobów do katalogu web (pliki, JS, CSS)
  $ php app/console generate:bundle - generowanie nowego pakietu
  $ php app/console generate:controller - generowanie kontrolera
  $ php app/console debug:router - wylistowanie akcji, ścieżki URI (kompletny routing)
  $ php app/console debug:router nazwa_ścieżki - detale ścieżki

...
----------------------------------------------------------------
przydatne klasy:
  use Symfony\Bundle\FrameworkBundle\Controller\Controller;
    // https://symfony.com/doc/2.8/service_container.html
    // serwis odpowiedzialny za templatki: $templating = $this->get('templating');
    // routing: $router = $this->get('router');
    // wysyłanie maili: $mailer = $this->get('mailer'); // http://symfony.com/doc/2.8/email.html
    // przekierowanie do innej akcji: return $this->redirect($url, [$slug], 302);
    // lub do innej strony: $this->redirect('http://google.pl');
    // generowanie url: $this->generateUrl('action_name', ['slug' => 'slug_value']);
    // ścieżka bezwzględna: $this->generateUrl('action_name', ['slug' => 'slug_value'], UrlGeneratorInterface::ABSOLUTE_URL);
  use Symfony\Component\HttpFoundation\Response - generowanie HTML z akcji
    // ew. JSON http://symfony.com/doc/2.8/components/http_foundation.html#creating-a-json-response
    // ew. pliki http://symfony.com/doc/2.8/components/http_foundation.html#serving-files
    // ew. templatki
  use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route - routing
    // routing trzymany jest w: app/config/routing.yml
  use Symfony\Component\HttpFoundation\Request; - GET, POST, cookies, session
    // newAction(Request $req){} - jeśli jest wykorzystany w akcji to musi byc jako pierwszy
    // dostęp do GET w akcji: $req->query->get('name');
    // dostęp do POST: $req->request->get('name');
    // dostęp do sesji: $session = $req->getSession();
    // zapis danych do sesji: $session->set('nazwa', 'wartość'); // wczytanie: $session->get('nazwa');
    // wczytanie danych z sesji z podaniem domyślnej wartości: $session->get('nazwa', "domyślna_wartość");
  use Symfony\Component\HttpFoundation\Cookie; - zarządzanie ciasteczkami
    // tworzenie: $cookie = new Cookie("cookieName", $value, time() + (3600 * 25));
    // zapamiętywanie: $resp = new Response(...); $resp->headers->setCookie($cookie); return $resp;
    // wczytywanie: $cookies = $req->cookies->all(); $cookieValue = $cookies["cookieName"];

...
----------------------------------------------------------------
usuwanie pakietów:
  /app/config/routing.yml - kasujemy plik zaczynający się od nazwy bundla
  /app/AppKernel.php - usuwamy wpis z tablicy $bundles
  /src/nazwabundla - usuwamy katalog
----------------------------------------------------------------
główna struktura katalogów symfony:
  app - katalog główny z plikami konfiguracyjnymi i plikami zasobów
  bin - dane doctrine
  vendor - wszystko zainstalowane przez composer (nie modyfikować!)
  src - pakiety (bundle/pluginy), w tym nowo tworzone przez użytkownika
  web - wszystko wystawione na widok publiczny: front kontroler, JS, CSS, pliki wgrywane przez użytkowników
  tests - testy:  http://symfony.com/doc/2.8/testing.html
----------------------------------------------------------------
przykłady adnotacji:
  /**
   * @Route("/user/")
   */
    // jeśli umieści się ścieżkę przed klasą kontrolera to będzie ona dotyczyła wszystkich akcji w kontrolerze

  @Route("/helloWorld", name="hello") // alias hello dla adresu helloWorld
  @Route("/helloWorld/{wyrazenie}/{wyr2}") // wyrazenie (slug) przekazujemy jako parametr do akcji ($wyrazenie) or . instead /
  @Route("/post/{slug}/{slug2}", defaults={"slug" = 7, "slug2" = 89}) // slug z wartością domyślną
  @Route("/hello/{name}", requirements={"name"="\w+"}) // wymagania dla sluga - zastosowanie regex
  @Method({"GET","POST"}) // przypisanie akcji do dwóch metod http, do jednej: @Method("POST")



























