oficjalna dokumentacja:
https://dev.mysql.com/doc/
----------------------------------------------------

ALTER TABLE
  // ALTER TABLE table_name ADD column datatype;
  // zmiana tabeli, np. dodanie kolumny
AND (używany po WHERE)
  // SELECT column_name(s) FROM table_name WHERE column_1 = value_1 AND column_2 = value_2;
  // wybierz kolumny z tabeli, gdzie warunek1 i warunek2 muszą być spełnione
  // używany po WHERE, przeciwieństwem jest operator OR (lub)
AS
  // SELECT column_name AS 'Alias' FROM table_name;
  // wybierz kolumnę jako Alias z tabeli (kolumna jest zwracana pod nową nazwą)
ASC (ascending)
  // SELECT * FROM tweet ORDER BY tweet_date ASC
  // uporządkuj według -> rosnąco (alfabetycznie lub liczbowo)
  // przeciwieństwem jest DESC
AVG (average)
  // SELECT AVG(column_name) FROM table_name;
  // zwraca średnią wartość dla kolumny numerycznej
BETWEEN (używany po WHERE)
  // SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value_1 AND value_2;
  // wybierz z tabeli rekordy, które zawierają się pomiędzy wartością1 a wartością2
  // wartościami moga być numery, stringi, daty (BLOB nie przejdzie)
COUNT
  // SELECT COUNT(column_name) FROM table_name;
  // zlicza liczbę wierszy w kolumnie, które posiadają wartość (czyli wszystkie oprócz NULL)
  // zwraca liczbę całkowitą
  // SELECT COUNT(comment_tweet_id) AS count_comments FROM comment WHERE comment_tweet_id = 2
CREATE TABLE
  // CREATE TABLE table_name (column_1 datatype, column_2 datatype, column_3 datatype);
DELETE
  // UWAGA: upewnij się, że backup bazy jest zrobiony, zawsze używaj słowa WHERE
  // UWAGA: najpierw przetestuj komendę z SELECT zamiast DELETE, LIMIT 1 też jest przydatne
  // UWAGA: do zwykłej obsługi bazy powinien być stworzony użytkownik, który nie ma uprawnień do usuwania
  // DELETE FROM table_name WHERE some_column = some_value;
  // usuń wiersze z tabeli, gdzie spełniony jest warunek
  // DELETE FROM table_name;
  // usuń WSZYSTKIE wiersze z tabeli
DESC (descending)
  // SELECT * FROM tweet ORDER BY tweet_description DESC LIMIT 300
  // wybierz wszystko, uporządkuj wg. malejąco, max 300 rekordów (alfabetycznie lub liczbowo)
  // przeciwieństwem jest ASC
DROP (UWAGA: komenda niebezpieczna)
  // DROP DATABASE db_name; 
  // DROP TABLE table_name;
  // usuń bazę, tabelę
  // ALTER TABLE table_name DROP INDEX index_name; 
  // usunięcie indeksu tabeli
GROUP BY
  // SELECT COUNT(*) FROM table_name GROUP BY column_name;
  // grupuj według kolumny. Zwraca wiersze wypełnione, identyczne grupuje
JOIN // INNER JOIN
  // SELECT column_name(s) FROM table_1 JOIN table_2 ON table_1.column_name = table_2.column_name;
  // łaczy wiersze z różnych tabel jeśli warunek jest prawdziwy
  OUTER JOIN
  // SELECT column_name(s) FROM table_1 LEFT JOIN table_2 ON table_1.column_name = table_2.column_name;
  // zwrócony jest każdy wiersz z lewej tabeli, jeśli warunek nie jest spełniony to dołączone
  // wiersze z prawej są wypełnione NULL. Analogicznie działa RIGHT JOIN
  // Pomoc graficzna: https://images86.fotosik.pl/144/eea5cea03e104bf7.png
INSERT
  // INSERT INTO table_name (column_1, column_2, column_3) VALUES (value_1, 'value_2', value_3);
  // zwykłe wstawienie nowego wiersza do tabeli
LIKE (używany po WHERE)
  // SELECT column_name(s) FROM table_name WHERE column_name LIKE pattern;
LIMIT
  // SELECT column_name(s) FROM table_name LIMIT 13;
  // zwróć maksymalnie 13 rekordów
MAX
  // SELECT MAX(column_name) FROM table_name;
  // przyjmuje nazwę kolumny jako argument i zwraca największą wartość w tej kolumnie
MIN
  // SELECT MIN(column_name) FROM table_name;
  // przyjmuje nazwę kolumny jako argument i zwraca najmniejszą wartość w tej kolumnie
OR (używany po WHERE)
  // SELECT column_name FROM table_name WHERE column_name = value_1 OR column_name = value_2;
  // wybierz kolumny z tabeli, gdzie spełniony jest warunek1 lub warunek2
  // używany po WHERE, przeciwieństwem jest operator AND
ORDER BY
  // SELECT column_name FROM table_name ORDER BY column_name ASC|DESC;
  // uporządkuj wg. kolumny rosnąco/malejąco
ROUND
  // SELECT ROUND(column_name, 3) FROM table_name;
  // zaokrąglenie z dokładnością do 3 miejsc po przecinku
  // SELECT ROUND(-5.99549, 2) ->wynik-> -6.00
  // SELECT ROUND(593149, -3) ->wynik-> 593000
SELECT
  // SELECT column_name FROM table_name;
  // każde pobieranie danych z bazy zaczyna sie od SELECT
  // SELECT COUNT(message_id) AS new_messages FROM message WHERE receiver_id =1 && read = 0 && receiver_visible = 0;




----------------------------------------------------
nazewnictwo

tabele w bazie: 
- nigdy i nigdzie nie stosować spacji i znaków typowych dla języka polskiego,
- nazwy tabel tylko małymi literami,
- nie korzystać z camelCase, dla nazw złożonych stosować podkreślenie, np. "compound_name",
- nazwy powinny być opisowe i w miarę możliwości krótkie, najlepiej jeśli tabela nazywa się tak samo jak klasa,
- nie stosować znaków specjalnych ani słów zarezerwowanych przez bazę danych

kolumny w tabeli:
- do nazywania stosować rzeczowniki w liczbie pojedynczej,
- nigdy i nigdzie nie stosować spacji i znaków typowych dla języka polskiego,
- nazwy kolumn tylko małymi literami,
- nie korzystać z camelCase, znaków specjalnych, ąśę, itp.

----------------------------------------------------
linki

wszystkie JOINy na jednych schemacie:
https://images86.fotosik.pl/144/eea5cea03e104bf7.png

opis najczęściej używanych komend SQL:
https://www.codecademy.com/articles/sql-commands?r=master

w3schools:
https://www.w3schools.com/sql/sql_functions.asp

budowanie baz online:
https://dbdesigner.net/

bindowanie parametrów, MySQLi vs PDO:
https://code.tutsplus.com/tutorials/pdo-vs-mysqli-which-should-you-use--net-24059

PDO:
https://pl.wikibooks.org/wiki/PHP/Biblioteka_PDO
http://php.net/manual/en/book.pdo.php

zaokrąglanie liczb w MySQL (bardzo dokładny opis):
https://www.miotk.eu/mysql-jak-zaokraglic-liczby-w-bazie-mysql.html#poczatek-strony

podstawy MySQL:
http://www.bazy-danych.net/







