oficjalna dokumentacja:
https://dev.mysql.com/doc/
----------------------------------------------------

ALTER TABLE
  // ALTER TABLE table_name ADD column datatype; //zmiana tabeli - tu dodanie kolumny
  // ALTER TABLE table_name DROP COLUMN column_name;  // usunięcie kolumny
  // ALTER TABLE table_name MODIFY COLUMN column_name new_datatype; // modyfikacja
  // ALTER TABLE `tweet` CHANGE `tweet_date` `tweet_date` DATETIME NULL DEFAULT NULL;
AND (używany po WHERE)
  // SELECT column_name(s) FROM table_name WHERE column_1 = value_1 AND column_2 = value_2;
  // wybierz kolumny z tabeli, gdzie warunek1 i warunek2 muszą być spełnione
  // SELECT * FROM message WHERE message_sender_id = 33 AND message_sender_visible = 0;
  // SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000 AND genre = 'comedy';
  // używany po WHERE, przeciwieństwem jest operator OR (lub)
AS
  // SELECT column_name AS 'Alias' FROM table_name;
  // wybierz kolumnę jako Alias z tabeli (kolumna jest zwracana pod nową nazwą)
  // SELECT COUNT(mess_1) AS new_messages FROM message WHERE message_receiver_id =2 && message_read = 0 && message_receiver_visible = 0;
  // SELECT albums.name AS 'Album', albums.year, artists.name AS 'Artist' FROM albums JOIN artists ON albums.artist_id = artists.id
     WHERE albums.year > 1980;
ASC (ascending)
  // SELECT * FROM tweet ORDER BY tweet_date ASC
  // uporządkuj według -> rosnąco (alfabetycznie lub liczbowo)
  // przeciwieństwem jest DESC
  // SELECT * FROM tweet ORDER BY tweet_date ASC LIMIT 4;
AVG (average)
  // SELECT AVG(column_name) FROM table_name;
  // zwraca średnią wartość dla kolumny numerycznej
  // SELECT AVG(tweet_user_id) FROM tweet;
  // SELECT price, AVG(downloads) FROM fake_apps GROUP BY price;
BETWEEN (używany po WHERE)
  // SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value_1 AND value_2;
  // wybierz z tabeli rekordy, które zawierają się pomiędzy wartością1 a wartością2
  // wartościami moga być numery, stringi, daty (BLOB nie przejdzie)
  // SELECT * FROM movies WHERE name BETWEEN 'A' AND 'J'; // włączając w to A do J, ale wyłączając J...
  // dla liczb: druga jest włączana. Dla liter: druga jest wyłączana
CASE
  // występuje przeważnie po SELECT, musi kończyć się poleceniem END
  // pozwala na wykorzystanie logiki if(WHEN->THEN)-else
     SELECT name, imdb_rating,
      CASE
       WHEN imdb_rating > 8 THEN 'Fantastic'
       WHEN imdb_rating > 6 THEN 'Poorly Received'
       WHEN imdb_rating > 5 THEN 'OK...'
       ELSE 'Avoid at All Costs'
      END AS 'review'
     FROM movies;
  // wynikiem powyższego będą zwrócone kolumny 'name', 'imdb_rating' oraz 'reviev'
COUNT
  // SELECT COUNT(column_name) FROM table_name;
  // zlicza liczbę wierszy w kolumnie, które posiadają wartość (czyli wszystkie oprócz NULL)
  // zwraca liczbę całkowitą
  // SELECT COUNT(comment_tweet_id) AS count_comments FROM comment WHERE comment_tweet_id = 2
  // SELECT COUNT(*) FROM fake_apps;
  // SELECT price, COUNT(*) FROM fake_apps WHERE downloads > 20000 GROUP BY price;
  // SELECT origin, id, (SELECT COUNT(*) FROM flights f WHERE f.id < flights.id AND f.origin=flights.origin) + 1
     AS flight_sequence_number FROM flights;
CREATE TABLE
  // CREATE TABLE table_name (column_1 datatype, column_2 datatype, column_3 datatype);
  // CREATE TABLE celebs (id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY, name TEXT UNIQUE, age INTEGER);
CREATE DATABASE
  // CREATE DATABASE new_database_name;
DELETE
  // UWAGA: upewnij się, że backup bazy jest zrobiony, zawsze używaj słowa WHERE
  // UWAGA: najpierw przetestuj komendę z SELECT zamiast DELETE, LIMIT 1 też jest przydatne
  // UWAGA: do zwykłej obsługi bazy powinien być stworzony użytkownik, który nie ma uprawnień do usuwania
  // DELETE FROM table_name WHERE some_column = some_value;
  // usuń wiersze z tabeli, gdzie spełniony jest warunek
  // DELETE FROM table_name;
  // usuń WSZYSTKIE wiersze z tabeli
  // DELETE FROM celebs WHERE twitter_handle IS NULL;
DESC (descending)
  // SELECT * FROM tweet ORDER BY tweet_description DESC LIMIT 300
  // wybierz wszystko, uporządkuj wg. malejąco, max 300 rekordów (alfabetycznie lub liczbowo)
  // przeciwieństwem jest ASC
  // SELECT * FROM tweet ORDER BY tweet_author DESC LIMIT 400;
DESCRIBE
  // DESCRIBE table_name;
DISTINCT
  // używany do zwracania unikalnych wartości (po SELECT)
  // SELECT DISTINCT tools FROM inventory;
DROP (UWAGA: komenda niebezpieczna)
  // DROP DATABASE db_name; // usuń baze danych
  // DROP TABLE table_name; // usuń tabelę
  // ALTER TABLE table_name DROP INDEX index_name; 
  // usunięcie indeksu tabeli
EXPLAIN
EXPLAIN EXTENDED
  // http://blog.ksiazek.info/2010/04/09/benchmark-i-profiling/
  // EXPLAIN SELECT first_name, last_name, title FROM film LEFT OUTER JOIN film_actor USING (film_id) LEFT OUTER JOIN...;
  // EXPLAIN EXTENDED SELECT first_name, last_name, title FROM...;
GROUP BY
  // SELECT COUNT(*) FROM table_name GROUP BY column_name;
  // grupuj według kolumny. Zwraca wiersze wypełnione, identyczne grupuje
  // SELECT a.dep_month, a.dep_day_of_week, AVG(a.flight_distance) AS average_distance FROM (SELECT dep_month,
     dep_day_of_week, dep_date, sum(distance) AS flight_distance FROM flights GROUP BY 1,2,3) a GROUP BY 1,2 ORDER BY 1,2;
HAVING
  // w przeciwieństwie do WHERE HAVING odnosi się do wyniku zapytania (lub do każdej grupy, jeśli mamy grupowanie) a nie jednego rekordu
  // SELECT categories.category_name FROM categories INNER JOIN products ON categories.id = products.category_id
     GROUP BY categories.category_name
     HAVING AVG(products.price) > 50;
  // Klauzula WHERE może być używana wraz z poleceniami SELECT, INSERT oraz UPDATE, natomiast HAVING jedynie z poleceniem SELECT
  // W przypadku, gdy w kwerendzie nie użyto GROUP BY, HAVING ma takie samo zastosowanie jak WHERE
JOIN // INNER JOIN
  // SELECT column_name(s) FROM table_1 JOIN table_2 ON table_1.column_name = table_2.column_name;
  // łaczy wiersze z różnych tabel jeśli warunek jest prawdziwy
  // SELECT * FROM albums JOIN artists ON albums.artist_id = artists.id;
  OUTER JOIN
  // SELECT column_name(s) FROM table_1 LEFT JOIN table_2 ON table_1.column_name = table_2.column_name;
  // zwrócony jest każdy wiersz z lewej tabeli, jeśli warunek nie jest spełniony to dołączone
  // wiersze z prawej są wypełnione NULL. Analogicznie działa RIGHT JOIN
  // Pomoc graficzna: https://images86.fotosik.pl/144/eea5cea03e104bf7.png
INSERT
  // INSERT INTO table_name (column_1, column_2, column_3) VALUES (value_1, 'value_2', value_3);
  // zwykłe wstawienie nowego wiersza do tabeli
  // INSERT INTO celebs (name, age) VALUES ('Arnold Bieber', 21);
  // kopiowanie z tabeli do tabeli: https://skillstest.pl/library/question/68
LIKE (używany po WHERE)
  // SELECT column_name(s) FROM table_name WHERE column_name LIKE pattern;
  // SELECT * FROM movies WHERE name LIKE 'Se_en'; // _ (podkreślnik) oznacza tu dowolny znak
  // SELECT * FROM movies WHERE name LIKE 'a%'; // % oznacza tu dowolną ilość dowolnych znaków
LIMIT (występuje wyłącznie na samym końcu zapytania)
  // SELECT column_name(s) FROM table_name LIMIT 13;
  // zwróć maksymalnie 13 rekordów
  // SELECT * FROM movies ORDER BY imdb_rating ASC LIMIT 3;
MAX
  // SELECT MAX(column_name) FROM table_name;
  // przyjmuje nazwę kolumny jako argument i zwraca największą wartość w tej kolumnie
  // SELECT name, category, MAX(downloads) FROM fake_apps GROUP BY category;
MIN
  // SELECT MIN(column_name) FROM table_name;
  // przyjmuje nazwę kolumny jako argument i zwraca najmniejszą wartość w tej kolumnie
  // SELECT name, category, MIN(downloads) FROM fake_apps GROUP BY category;
OR (używany po WHERE)
  // SELECT column_name FROM table_name WHERE column_name = value_1 OR column_name = value_2;
  // wybierz kolumny z tabeli, gdzie spełniony jest warunek1 lub warunek2
  // SELECT * FROM movies WHERE genre = 'comedy' OR year < 1980;
  // używany po WHERE, przeciwieństwem jest operator AND
ORDER BY (używany po WHERE jeśli WHERE w ogóle występuje)
  // SELECT column_name FROM table_name ORDER BY column_name ASC|DESC;
  // uporządkuj wg. kolumny rosnąco/malejąco
  // SELECT * FROM movies ORDER BY imdb_rating DESC;
REGEX
  // SELECT * FROM pet WHERE name REGEXP '^.{5}$';
  // SELECT * FROM pet WHERE name REGEXP 'fy$';
ROUND
  // SELECT ROUND(column_name, 3) FROM table_name;
  // zaokrąglenie z dokładnością do 3 miejsc po przecinku
  // SELECT ROUND(-5.99549, 2) ->wynik-> -6.00
  // SELECT ROUND(593149, -3) ->wynik-> 593000
  // SELECT price, ROUND(AVG(downloads), 2) FROM fake_apps GROUP BY price; // zaokrąglenie do 2 miejsc po przecinku
SELECT
  // SELECT column_name FROM table_name;
  // każde pobieranie danych z bazy zaczyna sie od SELECT
  // SELECT COUNT(message_id) AS new_messages FROM message WHERE receiver_id =1 && read = 0 && receiver_visible = 0;
  // SELECT * FROM movies WHERE imdb_rating > 8; // inne operatory: =, !=, <, >, <=, >=
  // SELECT albums.name, albums.year, artists.name FROM albums, artists; // cross join
  // SELECT * FROM flights WHERE origin in (SELECT code FROM airports WHERE elevation > 2000);
SELECT DISTINCT
  // SELECT DISTINCT column_name FROM table_name;
  // zwaraca unikalne (nie powtarzające się) wartości dla wybranej kolumny
  // SELECT DISTINCT genre FROM movies;
SUM
  // SELECT SUM(column_name) FROM table_name;
  // zwraca sumę wartości z wybranej kolumny
  // SELECT category, SUM(downloads) FROM fake_apps GROUP BY category;
TRUNCATE
  // TRUNCATE TABLE table_name;
  // usuwa dane z tabeli. W przeciwieństwie do DELETE jest nieodwracalne (nie działa rollback), szybsze, nie wywołuje triggerów,
  // resetuje autoincrement, usuwa wszystkie dane bez możliwości filtrowania. Użycie [TABLE] jest opcjonalne.
  // W przeciwieństwie do DROP sama tabela nie jest usuwana (usuwane są wszystkie wpisy).
UPDATE
  // UWAGA: upewnij się, że backup bazy jest zrobiony, zawsze używaj słowa WHERE
  // UWAGA: najpierw przetestuj komendę z SELECT zamiast UPDATE
  // UPDATE table_name SET some_column = some_value WHERE some_column = some_value;
  // jeśli nie użyjesz wyrażenia WHERE zaktualizowane zostaną wszystkie wiersze w tabeli
WHERE
  // SELECT column_name(s) FROM table_name WHERE column_name operator value;
  // wybierz kolumny z tabeli gdzie nazwa jakiś wiersz i tu warunek ->
  // używane po WHERE: AND, OR, BETWEEN, LIKE (podobne wartości), =, != (różne), <, >, <=, >=
  // IS NULL, IS NOT NULL

cdn. 

----------------------------------------------------
nazewnictwo

tabele w bazie: 
- nigdy i nigdzie nie stosować spacji i znaków typowych dla języka polskiego,
- nazwy tabel tylko małymi literami,
- nie korzystać z camelCase, dla nazw złożonych stosować podkreślenie, np. "compound_name",
- nazwy powinny być opisowe i w miarę możliwości krótkie, najlepiej jeśli tabela nazywa się tak samo jak klasa,
- nie stosować znaków specjalnych ani słów zarezerwowanych przez bazę danych

kolumny w tabeli:
- do nazywania stosować rzeczowniki w liczbie pojedynczej,
- nigdy i nigdzie nie stosować spacji i znaków typowych dla języka polskiego,
- nazwy kolumn tylko małymi literami,
- nie korzystać z camelCase, znaków specjalnych, ąśę, itp.

UWAGA: jeśli w kolumnie ma być trzymana cena wybierz DECIMAL! Nie stosuj float.
----------------------------------------------------
linki

wszystkie JOINy na jednych schemacie:
https://images86.fotosik.pl/144/eea5cea03e104bf7.png
https://skillstest.pl/library/question/4

opis najczęściej używanych komend SQL:
https://www.codecademy.com/articles/sql-commands?r=master

bardzo rozbudowany tutorial:
http://www.mysqltutorial.org/
http://www.mysqltutorial.org/php-mysql/

w3schools:
https://www.w3schools.com/sql/sql_functions.asp

budowanie baz online:
https://dbdesigner.net/

bindowanie parametrów, MySQLi vs PDO:
https://code.tutsplus.com/tutorials/pdo-vs-mysqli-which-should-you-use--net-24059

PDO:
https://pl.wikibooks.org/wiki/PHP/Biblioteka_PDO
http://php.net/manual/en/book.pdo.php

zaokrąglanie liczb w MySQL (bardzo dokładny opis):
https://www.miotk.eu/mysql-jak-zaokraglic-liczby-w-bazie-mysql.html#poczatek-strony

podstawy MySQL:
http://www.bazy-danych.net/

MySQL poprzez konsolę:
mysql -h hostname -u username -p -D databasename; 
http://www.nibyblog.pl/podstawy-mysql-w-konsoli-linuxa-4887.html

Dobre praktyki w SQL:
https://skillstest.pl/library/question/69

----------------------------------------------------
mini-słownik
RDBMS - Relational Database Management System 





