oficjalna strona i dokumentacja: https://git-scm.com/
Instalacja (Linux Ubuntu): w wierszu poleceń: sudo apt-get install git


Konfiguracja:
  git config --global user.name "Imię Nazwisko lub Nick"
  git config --global user.email "twojmail@gmail.elo"
  git config --global core.editor nano // zmiana edytora dla terminala (VIM jest domyślny - niezalecany dla początkującego ;)


.gitignore:
  // Jeśli nie chcesz śledzić konkretnego pliku/folderu to do projektu dodajesz plik o nazwie .gitignore
  // screen: https://images85.fotosik.pl/172/2fb88b4ada2662b6.png
  // zasady formatowania .gitignore:
     - linia zaczynająca się od znaku # jest komentarzem
     - można stosować wyrażenia przetwarzania katalogów zgodnie z tymi z konsoli (np. znak * oznacza dowolny znak)
     - dodanie ostatniego znaku „/” oznacza wskazanie katalogu
     - istnieje możliwość negowania definicji poprzez wstawienie znaku „!” na początku


git config --list
  // wyświetlenie pozycji, które podaliśmy podczas konfiguracji (nick, mail, edytor...)
  // screen: https://images86.fotosik.pl/172/046f209e13606a9b.png
git --version
  // sprawdzanie wersji
  // screen: https://images86.fotosik.pl/172/9fd22b141d80e55d.png
git --help
  // podstawowa pomoc z opisem komend
  // screen: https://images86.fotosik.pl/172/9fd22b141d80e55d.png


git init
  // inicjalizacja projektu w folderze (stworzenie nowego repozytorium git)
git status (komenda nieinwazyjna)
  // sprawdzanie statusu, pokazywane są informacje o: gałęzi na której pracujemy (branch), nieśledzonych jeszcze plikach (untracked
  // files), itp. 
  // scree: https://images85.fotosik.pl/172/4aa0d92998a3ba42.png
git add filename
  // dodanie pojedynczego pliku do śledzenia, jeśli chcemy dodać wszystkie to: git add . (git add spacja kropka enter)
  // można także dodać kilka plików, nazwy oddziala się spacją, np.: git add filename_1 filename_2
  // można także dodać wszystkie pliki o konkretnym rozszerzeniu, np.: git add *.php
git rm file_name
  // UWAGA: trwałe usunięcie pliku ze śledzenia i z dysku twardego!
  // operacja zatwierdzana po commicie (git commit -m "comment")
git rm --cached file_name
  // usunięcie pliku z kontroli wersji, ale z pozostawieniem go na dysku
  // operacja zatwierdzana po commicie (git commit -m "comment")
git diff filename
  // sprawdzanie różnic w śledzonym pliku
git mv name1.php new_name.php
  // zmiana nazwy pliku
git commit -m (git commit witch message)
  // git commit -m "your message"
  // dodawanie zmian do repoztorium wraz z komentarzem (wiadomością)
  // git commit -a -m "your message" - zastępuje 2 komendy: git add i git commit, ale dotyczy tylko już śledzonych plików
git log
  // sprawdzanie historii zmian w repozytorium, podawane są: identyfikator commita, autor zmian, data i treść wprowadzonej wiadomości
  // klawisz "q" - wyjście z logu
git show HEAD (HEAD - najświeższe zmiany z lokalnego repozytorium)
  // wyświetla historię zmian jak w git log + pokazuje zmiany w plikach - usunięte wiersze na czerwono, dodane na zielono
git checkout HEAD filename
  // przywraca zmiany konkretnego pliku z ostatniego commita
git reset HEAD filename
  // wyłaczenie pliku ze śledzenia (nie bedzie brany pod uwagę przy commicie)
git reset SHA (7 pierwszych znaków)
  // przykład SHA: 5d692065cf51a2f50ea8e7b19b5a7ae512f633ba
  // użycie komendy przy powyższym SHA: git reset 5d69206 (SHA jest wyświetlane przy komendzie git log)
  // komenda "przewija" projekt do punktu, który wprowadzimy (inaczej: jest to zwykłe cofnięcie zmian)
  // właśnie dlatego dobre komentarze przy commitach są niezbędne
  // Uwaga: "powrót do przyszłości" nie jest możliwy
git branch
  // sprawdzanie gałęzi na której się znajdujesz (czyli odnogi/wersji projektu)
  // aktywna gałąź w spisie jest oznaczana * (gwiazdką)
git branch name_new_branch (nazwa nie może mieć białych znaków)
  // tworzenie nowej gałęzi w projekcie
git checkout branch_name
  // przełączanie się pomiędzy gałęziami (główną jest master)
git merge branch_name
  // przyłączenie gałęzi pobocznej do gałęzi głównej
  // wcześniej należy przełączyć się na gałąź główną (git checkout master)
  // Uwaga: jeśli wcześniej dopisałeś cos w gałęzi master będzie konflikt - w pliku git zaznaczy co zostało dopisane
  // w gałęziach, trzeba będzie wykasować niechciane zmiany, wszystkie komentarze gita i zapisać plik
git branch -d branch_name
  // wykasowanie zbędnej już gałęzi



cdn.

----------------------------------------------------------
linki

1/4: http://itcraftsman.pl/kontrola-wersji-z-git-cz-1-wstep/
2/4: http://itcraftsman.pl/kontrola-wersji-z-git-cz-2-instalacja-konfiguracja-i-pierwszy-commit/
3/4: http://itcraftsman.pl/kontrola-wersji-z-git-cz-3-cykl-zycia-plikow/
4/4: http://itcraftsman.pl/kontrola-wersji-z-git-cz-4-zdalne-repozytoria/

szybki, darmowy kurs:
https://www.codecademy.com/learn/learn-git

kolejny kurs:
https://www.udacity.com/course/how-to-use-git-and-github--ud775

prosty przewodnik:
https://rogerdudler.github.io/git-guide/

pro git - jeśli chcesz sie zagłębić w temat:
https://git-scm.com/book/en/v2

free ebook:
https://www.git-tower.com/learn/git/ebook



