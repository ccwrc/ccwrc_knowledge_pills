Sprawdzanie wyrazeń regularnych online:
https://regex101.com/


Każdy znak, oprócz znaków specjalnych, określa sam siebie, np. c oznacza znak c.
Kolejne symbole oznaczają, że w łańcuchu muszą wystąpić dokładnie te symbole w dokładnie takiej samej kolejności, np. xv oznacza, że łańcuch musi składać się ze znaku ax poprzedzającego znak v.
--------------------------------------------------------------------------------------------------------
^ - początek wiersza $ - koniec wiersza (zezwala na zakończenie wyrażenia przejściem do nowej linii \n.)
/ogranicznik wyrażenia/ lub #także ogranicznik wyrażenia# ew. ~też ogranicznik~
--------------------------------------------------------------------------------------------------------
. (kropka) - dowolny znak z wyjątkiem znaku nowego wiersza
[ ] - jeden dowolny znak ze znaków pomiędzy nawiasami, np. [abc] a,b lub c
[^...] - jeden dowolny znak z wyjątkiem tych w nawiasie (negacja zbioru). Jeśli ^ występuje na początku wyrażenia to oznacza początek wiersza
[a-e] - jeden znak z przedziału od a do e
[A-Z] - jedna dowolna wielka litera od A do Z 
[a-zA-Z] - jedna dowolna wielka lub mała litera z przedziału A-z
[0-9] - dowolna cyfra od 0 do 9
(...) - grupa symboli (tzw. atom) do późniejszego wykorzystania (przechwytywanie, odwołania wsteczne)
(?:...) - grupa pasywna, nie działa na nią przechwytywanie, jest pomijana w liczeniu
| - odpowiednik słowa lub, oznacza wystąpienie jednego z podanych wyrażeń: a|b|c oznacza a lub b lub c.
  Uwaga: w nawiasach [] znak | jest traktowany jako zwykły znak
* - 0 (zero) lub więcej wystąpień poprzedzającego wyrażenia [abc]* – 0 lub więcej znaków ze zbioru abc
+ - 1 (jedno) lub więcej wystąpień poprzedzającego wyrażenia
? - najwyżej jedno wystąpienie (może być 0) poprzedzającego wyrażenia
inne znaczenie pytajnika: .* - kwantyfikator zwykły, .*? - kwantyfikator leniwy

znaki specjalne jako zwykłe poprzedzane są backslashem np.:
\. – to kropka a nie dowolny znak,
\.+ – to jedna kropka lub więcej.
\$ \^ \* \[ \( \] \) \- \@ itp. UWAGA: dla backslash prawidłowo to: \\\\

Rozszerzenia:
\c - klawisz ctrl (znaki sterujące), np. \cM oznacza ctrl-M
\d - dowolna cyfra (czyli [0-9])
\D - dowolny znak niebędący cyfrą (czyli [^0-9])
\s - dowolny znak biały (np. spacja, tabulator, klasa znaków: [ \n\t\r\f])
\S - dowolny znak niebędący znakiem białym (klasa znaków: [^ \n\t\r\f])
\w - dowolny znak wyrazu (klasa znaków: [a-zA-Z0-9_])
\W - dowolny znak niebędący znakiem wyrazu (klasa znaków: [^a-zA-Z0-9_])
\n - nowa linia
\t - tabulator
\r - powrót karetki
\f - rozpoczęcie nowej strony
\< - start słowa
\> - koniec słowa
\x## - znak o kodzie podanym szesnastkowo, np. \x4b to wielka litera K
\O - cyfra o kodzie podanym ósemkowo
\x{####} - znak UNICODE, np. \x{20AC} to symbol Euro €
\e - escape, jak chr(27) w ASCII
\cyfra lub liczba, np. \4 - przechwytywanie wyrazu/wyrażenia umieszczonego w ()
[\b] - backspace
(?P<etykieta>wyrażenie regularne) - przechwytywanie wyrażenia umieszczonego w () wraz z nadaniem mu nazwy (tu: etykieta)
(?P=etykieta) - odwołanie się do wyrażenia za pomocą nadanej wcześniej mu nazwy
[:digit:] - dowolna cyfra ([:...:] zapis POSIX-owy)
[:alpha:] - dowolna litera
[:alnum:] - dowolna cyfra i litera
[:cntrl:] - znaki sterujące
[:xdigit:] - cyfry w zapisie szesnastkowym
{} - kwantyfikator zasięgu
{N} - dokładnie N wystąpień, np. [1-8]{3} - trzy cyfry z przedziału od 1 do 8. Jedna cyfra: /^[0-9]{1}$/
{N,} - co najmniej N wystąpień
{0,M} - maksymalnie M wystąpień
{N,M} - od N do M wystąpień

Tryby dopasowania (można łączyć, np.: /w+/iu lub /^([a-r]{2})(-[0-9]{3})?$/suD):
i - ignoruje wielkość liter w wyrażeniu
m - wykonuje dopasowanie dla wielu linii
s - kropka oznacza również znak nowej linii
u - stosuje UTF-8
U - domyślne kwantyfikatory nie są zachłanne (styka 1 dopasowanie)
e - zdeprecjonowany! pozwalał na użycie kodu PHP w wyrażeniu regularnym
D - wymusza interpretację $ jako bezwzględnego końca wyrażenia (możliwość dodania \n w niektórych przypadkach może być luką w bezpieczeństwie skryptu)

$regex = '/^ab$/'; // stosuj ' zamiast "

preg_match, preg_match_all
preg_match($pattern, $subject, $matches);
zwraca 1 jeśli jest dopasowanie, 0 brak dopasowania, false - błąd
if(preg_match_all($regex, $text, $matches) == 2) { - all wysz. wszystkie

preg_grep – wyszukuje elementy tablicy pasujące do wzoru.
$fl_array = preg_grep("/^(\d+)?\.\d+$/", $array);

preg_replace – wyszukuje i zamienia wystąpienia wzorca podanym tekstem.
preg_replace($pattern, $replacement, $string)

preg_split – dzieli łańcuch znaków przy użyciu wyrażenia regularnego oraz
zwraca tablicę z wyodrębnionymi częściami.
$keywords = preg_split("/[\s,]+/", "Dorotka drwal, czarnoksiężnik");

----------------------------------------------------------------------------
wyrażenia regularne w PHP (składnia Pearl - szybsza): http://php.net/manual/en/ref.pcre.php
http://php.net/manual/en/function.preg-match.php
----------------------------------------------------------------------------
przykłady praktyczne RegEx

kod pocztowy PL:
^([0-9]{2})(-[0-9]{3})?$ lub [0-9][0-9]-[0-9][0-9][0-9] ew. [\d][\d]-[\d][\d][\d]

$regex = '/^ab$/'; // dokładnie ab, abc nie bedzie juz pasowac
// preg_match, preg_match_all, zwraca 1 jesli jest dopasowanie, 0 brak dopasowania, false - błąd
$text = 'ab';
if(preg_match($regex, $text) == 1) {...

$regex = '/^.xyz$/'; // 1 dowolny znak + xyz
$regex = '/^.xyz[ABC]$/'; // 1 dowolny znak + xyz + 1 dowolny znak z puli ABC
$regex = '/^.xyz[A-Z]$/'; // 1 dowolny znak + xyz + dowolna litera z przedzialu A-Z
$regex = '/^.xyz[^A-Z]$/'; //1 dowolny znak + xyz + dowolny znak z wykluczeniem przedzialu liter A-Z
$regex = '/^(.xyz)|([^A-Z])$/'; // dowolny znak + xyz lub dowolny znak spoza przedzialu A-Z
$regex = '/^.xyz[0-9]+\*$/'; // dowolny znak + xyz + 1 lub wiecej cyfra z przedzialu 0-9 + zwykła gwiazdka
$regex = '/^.xyz[0-8]{3}$/'; // dowolny znak + xyz + dokładnie 3 wystapienia cyfry z przedzialu 0-8
$regex = '/(\w+)([0-9])=\1\2/'; // 1 lub więcej wystąpień dowolnego znaku wyrazu +
  // cyfra z zakresu 0-9 = (przechwycenie 1 - znaki wyrazu)(przechwycenie 2 - cyfra)
  //if(preg_match($regex, $text, $matches) == 1) {
  //    echo 'Matched';
  //}  var_dump($matches);
  // wynik dumpa dla $text = 'Ala1=Ala1';
  //array (size=3)
  //  0 => string 'Ala1=Ala1' (length=9)
  //  1 => string 'Ala' (length=3)
  //  2 => string '1' (length=1)
$regex = '/[a-z]*WW/iU'; // 0 lub wiecej liter z przedzialu a-z + 2x wielkie W, ale...
  // ignorowanie wielkosci liter + domyslne kwantyfikatory nie sa zachlanne
  // $text = 'wwfgfdsdwz'; //czyli pasuje ww male na poczatku
$regex = '/[a-z]*WW./s'; // 0 lub wiecej wystapien liter z przedzialu a-z + 2x W + dowolny znak
  // lub nowa linia, s oznacza, ze . moze robic takze za znak nowej linii
$regex = '/^def/'; // na poczatku wyrazenia musi byc def
$regex = '/def/'; // preg_match_all - tu moze byc tylko jedno trafienie tego wyrazenia
  // if(preg_match_all($regex, $text, $matches) == 1) {...
$regex = '/def/'; // preg_match_all - tu maja byc dokladnie 2 trafienia
  // if(preg_match_all($regex, $text, $matches) == 2) {...
  // [UWAGA:]  przechwycone dopasowania lądują w tablicy zawsze począwszy od indeksu = 1, czyli od $matches[1]
  // do $matches[n]. W indeksie zerowym tablicy, czyli $matches[0] znajduje się zawsze ta część ciągu, od
  // którego zaczęło się dopasowanie [:UWAGA]
$regex = '/^(?P<etykieta>\w+)\+(?P=etykieta)=(?P=etykieta)$/';  // przechwytywanie
  // ^ - poczatek, () pierwszy nawias - dowolny znak wyrazu 1 lub wiecej razy z etykieta o nazwie etykieta
  // \+ plus jako zwykly znak, drugi () - przechwycony wyraz z 1 () -> etykieta, rowna sie
  // trzeci () przechwycony wyraz z 1 () -> etykieta, $ - koniec wyrazenia
  // pasujace wyrazenia: $text = "test1+test1=test1";, $text = "Dorotka+Dorotka=Dorotka";
  // zapis tego samego wyrażenia w wersji bez etykiety: $regex = '/^(\w+)\+\1=\1$/';
  // lub z etykietą o innej nazwie: $regex = '/^(?P<bla>\w+)\+(?P=bla)=(?P=bla)$/';
$regex = '/^(\d+)?\.\d+$/'  // wyszukiwanie float w tablicy
  // $array = [4, 'test', 3.11, 0.5, 100, .6];
  // $fl_array = preg_grep('/^(\d+)?\.\d+$/', $array); //zwroc tabke z elementow, ktore spelniaja warunki
  // dowolna cyfra 1 lub wiecej razy + to co po lewej najwyzej raz, . jako kropka, dowolna cyfra 1 lub wiecej razy
$textRegexp = '/^(\w+)=\1$/'; //dowolny znak wyrazu 1 lub wiecej razy
  // rowna sie \1 - przechwycenie pierwszego nawiasu, np. 'Ala78=Ala78'
$hexRegexp = '/^#?([a-f0-9]{6}|[a-f0-9]{3})$/';  // liczby szesnastkowe
  // zamiast #? mozna #{1} jesli chce sie byc pewnym dokładnie jednego hasza
$htmlTagRegexp = '/^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$/';
  // wyszukanie tagu HTML, np. <span data-max="140"></span>
$ipRegex = '^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$';
$mailRegex = '^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]{1,})*\.([a-zA-Z]{2,}){1}$';
$hourRegexp = '/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/'; // zwykla godzina z dwukropkiem
$regexp = '/\[\[.*\]\]/'; // kwantyfikator zwykly
$regexp = '/\[\[.*?\]\]/'; // kwantyfikator leniwy
  // $text = '[[Ala ma kota]] [[Ale kot nie ma Ali]]';
  // preg_match_all($regexp, $text, $matches);
  // zwykły - jedno trafienie, leniwy - dwa trafienia (leniwy, ale bardziej efektywny...)
$string = 'April 15, 2003';
$pattern = '/(\w+) (\d+), (\d+)/i';
$replacement = '${1} 1,${3} ${2}'; // ${1} - pierwszy nawias + spacja 1, ${3} trzeci nawias spacja
  // ${2} drugi nawias
  // echo(preg_replace($pattern, $replacement, $string));
  // wynik:  April 1,2003 15
$keywords = preg_split("/[\s,]+/", "Dorotka Kansas, kraina"); // wynik to tabka z 3 elementami(słowami)
  // rozdziel wg. dowolny znak bialy bialy lub przecinek, + - moga byc nawet 3 spacje
$regex = '/^(1)(?:2)(3)=\1\2$/'; // użycie grupy pasywnej (?:)
  // $text = "123=13"; - jest dopasowanie
  // $text = "123=12"; - NIE ma dopasowania
  // var_dump(preg_match($regex, $text)); // (?:2) jest pominięte w liczeniu dla dopasowania

----------------------------------------------------------------------------
linki 

krótki regex sprawdzający poprawność adresu E-mail (RFC):
http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html

ciekawy przykład konwersji daty w formie tekstowej na cyfrową:
https://pl.wikibooks.org/wiki/PHP/Podstawy_wyra%C5%BCe%C5%84_regularnych

operatory z podziałem na lewostronne i prawostronne:
https://www.p-programowanie.pl/php/budowanie-wyrazen-regularnych-php/

cheatsheet:
http://phpmajster.blogspot.com/search/label/CHEATSHEETS_REGEXP

(prawie) najdokładniejszy opis znaków specjalnych:
https://pl.wikibooks.org/wiki/AutoIt/Wyra%C5%BCenia_regularne







































